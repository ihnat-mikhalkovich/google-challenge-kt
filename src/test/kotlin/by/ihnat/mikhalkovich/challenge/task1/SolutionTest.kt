package by.ihnat.mikhalkovich.challenge.task1

import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

class SolutionTest {

    private val PRIMES_LINE: String = "23571113171923293137414347535961677173798389971011031071091131271311371391491511571631671731791811911931971992112232272292332392412512572632692712772812832933073113133173313373473493533593673733793833893974014094194214314334394434494574614634674794874914995035095215235415475575635695715775875935996016076136176196316416436476536596616736776836917017097197277337397437517577617697737877978098118218238278298398538578598638778818838879079119199299379419479539679719779839919971009101310191021103110331039104910511061106310691087109110931097110311091117112311291151115311631171118111871193120112131217122312291231123712491259127712791283128912911297130113031307131913211327136113671373138113991409142314271429143314391447145114531459147114811483148714891493149915111523153115431549155315591567157115791583159716011607160916131619162116271637165716631667166916931697169917091721172317331741174717531759177717831787178918011811182318311847186118671871187318771879188919011907191319311933194919511973197919871993199719992003201120172027202920392053206320692081208320872089209921112113212921312137214121432153216121792203220722132221223722392243225122672269227322812287229322972309231123332339234123472351235723712377238123832389239323992411241724232437244124472459246724732477250325212531253925432549255125572579259125932609261726212633264726572659266326712677268326872689269326992707271127132719272927312741274927532767277727892791279728012803281928332837284328512857286128792887289729032909291729272939295329572963296929712999300130113019302330373041304930613067307930833089310931193121313731633167316931813187319132033209321732213229325132533257325932713299330133073313331933233329333133433347335933613371337333893391340734133433344934573461346334673469349134993511351735273529353335393541354735573559357135813583359336073613361736233631363736433659367136733677369136973701370937193727373337393761376737693779379337973803382138233833384738513853386338773881388939073911391739193923392939313943394739673989400140034007401340194021402740494051405740734079409140934099411141274129413341394153415741594177420142114217421942294231424142434253425942614271427342834289429743274337433943494357436343734391439744094421442344414447445144574463448144834493450745134517451945234547454945614567458345914597460346214637463946434649465146574663467346794691470347214723472947334751475947834787478947934799480148134817483148614871487748894903490949194931493349374943495149574967496949734987499349995003500950115021502350395051505950775081508750995101510751135119514751535167517151795189519752095227523152335237526152735279528152975303530953235333534753515381538753935399540754135417541954315437544154435449547154775479548355015503550755195521552755315557556355695573558155915623563956415647565156535657565956695683568956935701571157175737574157435749577957835791580158075813582158275839584358495851585758615867586958795881589759035923592759395953598159876007601160296037604360476053606760736079608960916101611361216131613361436151616361736197619962036211621762216229624762576263626962716277628762996301631163176323632963376343635363596361636763736379638963976421642764496451646964736481649165216529654765516553656365696571657765816599660766196637665366596661667366796689669167016703670967196733673767616763677967816791679368036823682768296833684168576863686968716883689969076911691769476949695969616967697169776983699169977001701370197027703970437057706970797103710971217127712971517159717771877193720772117213721972297237724372477253728372977307730973217331733373497351736973937411741774337451745774597477748174877489749975077517752375297537754175477549755975617573757775837589759176037607762176397643764976697673768176877691769977037717772377277741775377577759778977937817782378297841785378677873787778797883790179077919" +"7927793379377949795179637993800980118017803980538059806980818087808980938101811181178123814781618167817181798191820982198221823182338237824382638269827382878291829382978311831783298353836383698377838783898419842384298431844384478461846785018513852185278537853985438563857385818597859986098623862786298641864786638669867786818689869386998707871387198731873787418747875387618779878388038807881988218831883788398849886188638867888788938923892989338941895189638969897189999001900790119013902990419043904990599067909191039109912791339137915191579161917391819187919992039209922192279239924192579277928192839293931193199323933793419343934993719377939193979403941394199421943194339437943994619463946794739479949194979511952195339539954795519587960196139619962396299631964396499661967796799689969797199721973397399743974997679769978197879791980398119817982998339839985198579859987198839887990199079923992999319941994999679973100071000910037100391006110067100691007910091100931009910103101111013310139101411015110159101631016910177101811019310211102231024310247102531025910267102711027310289103011030310313103211033110333103371034310357103691039110399104271042910433104531045710459104631047710487104991050110513105291053110559105671058910597106011060710613106271063110639106511065710663106671068710691107091071110723107291073310739107531077110781107891079910831108371084710853108591086110867108831088910891109031090910937109391094910957109731097910987109931100311027110471105711059110691107111083110871109311113111171111911131111491115911161111711117311177111971121311239112431125111257112611127311279112871129911311113171132111329113511135311369113831139311399114111142311437114431144711467114711148311489114911149711503115191152711549115511157911587115931159711617116211163311657116771168111689116991170111717117191173111743117771177911783117891180111807118131182111827118311183311839118631186711887118971190311909119231192711933119391194111953119591196911971119811198712007120111203712041120431204912071120731209712101121071210912113121191214312149121571216112163121971220312211122271223912241122511225312263122691227712281122891230112323123291234312347123731237712379123911240112409124131242112433124371245112457124731247912487124911249712503125111251712527125391254112547125531256912577125831258912601126111261312619126371264112647126531265912671126891269712703127131272112739127431275712763127811279112799128091282112823128291284112853128891289312899129071291112917129191292312941129531295912967129731297912983130011300313007130091303313037130431304913063130931309913103131091312113127131471315113159131631317113177131831318713217132191322913241132491325913267132911329713309133131332713331133371333913367133811339713399134111341713421134411345113457134631346913477134871349913513135231353713553135671357713591135971361313619136271363313649136691367913681136871369113693136971370913711137211372313729137511375713759137631378113789137991380713829138311384113859138731387713879138831390113903139071391313921139311393313963139671399713999140091401114029140331405114057140711408114083140871410714143141491415314159141731417714197142071422114243142491425114281142931430314321143231432714341143471436914387143891440114407144111441914423144311443714447144491446114479144891450314519145331453714543145491455114557145611456314591145931462114627146291463314639146531465714669146831469914713147171472314731147371474114747147531475914767147711477914783147971481314821148271483114843148511486714869148791488714891148971492314929149391494714951149571496914983150131501715031150531506115073150771508315091151011510715121151311513715139151491516115173151871519315199152171522715233152411525915263152691527115277152871528915299153071531315319153291533115349153591536115373153771538315391154011541315427154391544315451154611546715473154931549715511155271554115551155591556915581155831560115607156191562915641156431564715649156611566715671156791568315727157311573315737157391574915761157671577315787157911579715803158091581715823158591587715881158871588915901159071591315919159231593715959159711597315991160011600716033160571606116063160671606916073160871609116097161031611116127161391614116183161871618916193162171622316229162311624916253162671627316301163191633316339163491636116363163691638116411164171642116427164331644716451164531647716481164871649316519165291654716553165611656716573166031660716619166311663316649166511665716661166731669116693166991670316729167411674716759167631678716811168231682916831168431687116879168831688916901169031692116927169311693716943169631697916981169871699317011170211702717029170331704117047170531707717093170991710717117171231713717159171671718317189171911720317207172091723117239172571729117293172991731717321173271733317341173511735917377173831738717389" + "173931740117417174191743117443174491746717471174771748317489174911749717509175191753917551175691757317579175811759717599176091762317627176571765917669176811768317707177131772917737177471774917761177831778917791178071782717837178391785117863178811789117903179091791117921179231792917939179571795917971179771798117987179891801318041180431804718049180591806118077180891809718119181211812718131181331814318149181691818118191181991821118217182231822918233182511825318257182691828718289183011830718311183131832918341183531836718371183791839718401184131842718433184391844318451184571846118481184931850318517185211852318539185411855318583185871859318617186371866118671186791869118701187131871918731187431874918757187731878718793187971880318839188591886918899189111891318917189191894718959189731897919001190091901319031190371905119069190731907919081190871912119139191411915719163191811918319207192111921319219192311923719249192591926719273192891930119309193191933319373193791938119387193911940319417194211942319427194291943319441194471945719463194691947119477194831948919501195071953119541195431955319559195711957719583195971960319609196611968119687196971969919709197171972719739197511975319759197631977719793198011981319819198411984319853198611986719889198911991319919199271993719949199611996319973199791999119993199972001120021200232002920047200512006320071200892010120107201132011720123201292014320147201492016120173201772018320201202192";


//    public static String solution(int i) {
//        System.out.println(PRIMES_LINE.length());
//        return PRIMES_LINE.substring(i, i + 5);
//    }

    @Test
    fun `test with 0`() {
        // given
        val n = 0
        val expected = "23571"

        // when
        val result = Solution.solution(n)

        // then
        assertEquals(expected, result)
    }

    @Test
    fun `test with 3`() {
        // given
        val n = 3
        val expected = "71113"

        // when
        val result = Solution.solution(n)

        // then
        assertEquals(expected, result)
    }

    @Test
    fun `test with 15`() {
        // given
        val n = 15
        val expected = "93137"

        // when
        val result = Solution.solution(n)

        // then
        assertEquals(expected, result)
    }

    @Test
    fun `test with 10000`() {
        // given
        val n = 10000
        val expected = "02192"

        // when
        val result = Solution.solution(n)

        // then
        assertEquals(expected, result)
    }

    @Test
    fun `full test`() {
        // given

        // when
        for (i in 0..10000) {
            val substring = PRIMES_LINE.substring(i, i + 5)
            val solution = Solution.solution(i)
            if (substring != solution) {
                println("failed on `$i`")
                break
            }
        }

        // then
    }
}

/*
public class Solution {
    private static final int RESULT_RANGE = 5;

    public static String solution(int charsToSkip) {

        final int n = 23000;
        final int[] primes = new int[n + 1];

        primes[0] = 1;
        primes[1] = 1;

        final double sqrtN = Math.sqrt(n);
        for (int i = 2; i <= sqrtN; i++) {
            if (primes[i] == 0) {
                for (int j = 2, k = i * j; k < primes.length; j++, k = i * j) {
                    primes[k] = 1;
                }
            }
        }

        final StringBuilder result = new StringBuilder();
        for (int i = 2; i < primes.length; i++) {
            if (primes[i] == 0) {
                result.append(i);
            }
        }

        return result.substring(charsToSkip, charsToSkip + RESULT_RANGE);
    }
}
 */